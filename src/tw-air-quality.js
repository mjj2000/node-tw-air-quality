// Generated by CoffeeScript 1.6.3
/**
 * tw-air-quality
 * https://github.com/mjj2000/node-tw-air-quality
 *
 * Copyright (c) 2015 MJJ
 * Licensed under the MIT license.
*/


/* globals require, module*/


(function() {
  (function() {
    "use strict";
    var Promise, arrAirData, createQueryer, dataSourceUrl, fetchData, queryAllByCity, queryValueByCity, request, searchCity, _;
    Promise = require('promise');
    request = require('request');
    _ = require('lodash');
    dataSourceUrl = 'http://opendata.epa.gov.tw/ws/Data/AQX/?format=json';
    arrAirData = {};
    /**
     * Fetch all data
     * @return {promise} - Promise object.
    */

    fetchData = function() {
      return new Promise(function(resolve, reject) {
        var options, reqHandler;
        if (reqHandler) {
          reqHandler.abort();
        }
        options = {
          url: dataSourceUrl,
          followRedirect: true
        };
        return reqHandler = request(options, function(error, response, body) {
          if (!error && (response.statusCode === 200)) {
            arrAirData = JSON.parse(body);
            return resolve(arrAirData);
          } else {
            return reject(error);
          }
        });
      });
    };
    /**
     * Filter data by city
     * @param  {string} city - City name
     * @return {array}       - Data of all matched city
    */

    searchCity = function(city) {
      var arrCityData, objCityData, patCityName, _i, _len;
      arrCityData = [];
      patCityName = new RegExp(city);
      for (_i = 0, _len = arrAirData.length; _i < _len; _i++) {
        objCityData = arrAirData[_i];
        if (patCityName.test(objCityData.County) || patCityName.test(objCityData.SiteName)) {
          arrCityData.push(objCityData);
        }
      }
      return arrCityData;
    };
    /**
     * Trigger querying data by city
     * @param  {string} city - City name
     * @return {promise}     - Promise object.
    */

    queryAllByCity = function(city) {
      return new Promise(function(resolve, reject) {
        return fetchData().then(function() {
          var arrCityData;
          arrCityData = searchCity(city);
          if (arrCityData.length) {
            resolve(arrCityData);
          } else {
            reject(new Error('City not found'));
          }
        })["catch"](function(e) {
          return reject(e);
        });
      });
    };
    /**
     * Query value by target field and city name
     * @param  {string}   field   - Data field
     * @param  {string}   city    - City name
     * @param  {function} success - Success callback with value as argument
     * @param  {function} error   - Error callback with error object as argument
    */

    queryValueByCity = function(field, city, success, error) {
      success = _.isFunction(success) ? success : _.noop;
      error = _.isFunction(error) ? error : _.noop;
      return queryAllByCity(city).then(function(arrCityData) {
        var collection, objCityData, value, valueType, _i, _len;
        for (_i = 0, _len = arrCityData.length; _i < _len; _i++) {
          objCityData = arrCityData[_i];
          if (field in objCityData) {
            if (!valueType) {
              if (!_.isNaN(parseInt(objCityData[field], 10))) {
                valueType = 'number';
                collection = 0;
              } else {
                valueType = 'string';
                collection = [];
              }
            }
            switch (valueType) {
              case 'number':
                collection += parseInt(objCityData[field], 10);
                break;
              case 'string':
                collection.push(objCityData[field]);
            }
          }
        }
        if (valueType === 'number') {
          value = Math.round(collection / arrCityData.length, 2);
        } else {
          value = _.chain(collection).countBy().pairs().max(_.last).head().value();
        }
        return success(value);
      })["catch"](function(e) {
        return error(e);
      });
    };
    /**
     * Factory to create query function for city by field name
     * @param  {string} field - Field name of data
     * @return {function}     - Created function
    */

    createQueryer = function(field) {
      return function() {
        Array.prototype.unshift.call(arguments, field);
        return queryValueByCity.apply(null, arguments);
      };
    };
    return module.exports = {
      queryStatusByCity: createQueryer('Status'),
      queryPm25ByCity: createQueryer('PM2.5'),
      queryPm10ByCity: createQueryer('PM10'),
      querySo2ByCity: createQueryer('SO2'),
      queryCoByCity: createQueryer('CO'),
      queryO3ByCity: createQueryer('O3'),
      queryNo2ByCity: createQueryer('NO2'),
      queryWindSpeedByCity: createQueryer('WindSpeed'),
      queryWindDirecByCity: createQueryer('WindDirec'),
      queryFpmiByCity: createQueryer('FPMI'),
      queryNoxByCity: createQueryer('NOx'),
      queryNoByCity: createQueryer('No')
    };
  })(typeof exports === 'object' && exports || this);

}).call(this);
